#!/bin/bash

function checkDirectory() {
    macOsPath="/usr/local/var/lib/grafana/plugins/"
    linuxPath="/var/lib/grafana/plugins/"
    #判断插件默认目录
    OS=$1
    plugPath=$macOsPath
    if [[ "$OS" =~ ^Linux ]];
    then
        plugPath=$linuxPath
    fi
    if [ ! -x ${plugPath} ];
    then
        echo "1"
    else
        echo $plugPath
    fi
}

function checkLocalVersion() {
#   cd tencentcloud-monitor-app
   if [ -f "plugin.json" ];
    then
      local_pack="plugin.json"
    else
       local_pack="package.json"
    fi
    local_version=`grep version ${local_pack}`
    local_version=${local_version#*: \"}
    local_version=${local_version%\"*}
    echo $local_version
}

function checkVersion() {
    request_URL="https://github.com/TencentCloud/tencentcloud-monitor-grafana-app/releases/latest"
    latest_URL=`curl -s --connect-timeout 120 $request_URL | grep href | grep "You are being " | awk -F=\" '{print $2}' | awk -F\" '{print $1}'`
#    latest_URL=`curl $request_URL | grep href | grep "You are being " | awk -F=\" '{print $2}' | awk -F\" '{print $1}'`
    latest_version=${latest_URL#*tag/}
    if [ ! $latest_version ]; then
        echo "no"
        exit
    fi
    echo $latest_version
}
function checkCommand() {
    if ! command -v $1 >/dev/null 2>&1; then
        echo "Please install and add ${1} to the global environment!"
    else
        echo "1"
    fi
}

function version_lt() {
    test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" != "$1";
}

function backupFiles() {
    plugPath=$1
    cd $plugPath
    appName="tencentcloud-monitor-app"
    if [ ! -x ${appName} ];
    then
        echo "1"
        exit
    fi
    backName=$appName"-"`date '+%Y%m%d%H%M%S'`
    zip -r $backName.zip.backup $appName
    echo $backName
}

function UpdateProcess() {
    OS="`uname`"
    #判断插件默认目录
    plugPath=`checkDirectory $OS`
    if [ "$plugPath" = "1" ]; then
        echo "Please check the plugin directory!"
        exit
    fi
    #备份
    isBack=`backupFiles $plugPath`
    if [ "$isBack" = "1" ]; then
        echo "Please check the plugin directory!"
        exit
    fi
    appPath=`echo "${plugPath}/tencentcloud-monitor-app"`
    cd $appPath
    #判断本地插件版本
    local_version=`checkLocalVersion`
    local_curl=`checkCommand "curl"`
    if [ "$local_curl" != "1" ]; then
        echo $local_curl
        exit
    fi
    version=`checkVersion`
    if [ "$version" = "no" ]; then
        echo "curl command time-out, please check your proxy and try again."
        exit
    fi
    if ! version_lt $local_version $version; then
       echo "Congratulations! You are already at the latest version: ${local_version}."
       exit
    fi
    #判断全局命令是否存在
    local_grafana=`checkCommand "grafana-cli"`
    if [ "$local_grafana" != "1" ]; then
        echo $local_grafana
        exit
    fi
    #配置插件url
    rm -rf "tencentcloud-monitor-app"
    isError=`grafana-cli --pluginUrl https://github.com/TencentCloud/tencentcloud-monitor-grafana-app/releases/download/${version}/tencentcloud-monitor-app-${version}.zip plugins install tencentcloud-monitor-app ${version}`
    error="Error"
    result=$(echo $isError | grep "${error}")
    if [[ "$result" != "" ]]
    then
        echo "Upgrade failed..."
        echo "${isError}"
        unzip "${isBack}.zip.backup" > /dev/null 2>&1
        exit
    fi
    echo "Upgrade success, please restart your Grafana Server!"
}

function InstallProcess() {
    OS="`uname`"
    #判断插件默认目录
    plugPath=`checkDirectory $OS`
    if [ "$plugPath" = "1" ]; then
        echo "Please check the plugin directory!"
        exit
    fi
    cd $plugPath
    local_curl=`checkCommand "curl"`
    if [ "$local_curl" != "1" ]; then
        echo $local_curl
        exit
    fi
    if [ ! -n "$1" ]; then
        latest_version=`checkVersion`
        if [ "$latest_version" = "no" ]; then
        echo "curl command time-out, please check your proxy and try again."
        exit
    fi
    else
        latest_version=$1
    fi
    #判断全局命令是否存在
    local_grafana=`checkCommand "grafana-cli"`
    if [ "$local_grafana" != "1" ]; then
        echo $local_grafana
        exit
    fi
    #配置插件url
    isError=`grafana-cli --pluginUrl https://github.com/TencentCloud/tencentcloud-monitor-grafana-app/releases/download/${latest_version}/tencentcloud-monitor-app-${latest_version}.zip plugins install tencentcloud-monitor-app ${latest_version}`
    error="Error"
    result=$(echo $isError | grep "${error}")
    if [[ "$result" != "" ]]
    then
        echo "Upgrade failed..."
        echo "${isError}"
        exit
    fi
    echo "Install success, please restart your Grafana Server!"
}

function pluginsDirInstall() {
    plugPath=$1
    if [ ! -x ${plugPath} ];
    then
        echo "Please check your --pluginsDir value."
        exit
    fi
    cd $plugPath
    local_curl=`checkCommand "curl"`
    if [ "$local_curl" != "1" ]; then
        echo $local_curl
        exit
    fi

    if [ ! -n "$2" ]; then
        latest_version=`checkVersion`
        if [ "$latest_version" = "no" ]; then
            echo "curl command time-out, please check your proxy and try again."
            exit
        fi
    else
        latest_version=$2
    fi
    #判断全局命令是否存在
    local_grafana=`checkCommand "grafana-cli"`
    if [ "$local_grafana" != "1" ]; then
        echo $local_grafana
        exit
    fi
    #配置插件url

    isError=`grafana-cli --pluginUrl https://github.com/TencentCloud/tencentcloud-monitor-grafana-app/releases/download/${latest_version}/tencentcloud-monitor-app-${latest_version}.zip --pluginsDir $plugPath plugins install tencentcloud-monitor-app ${latest_version}`
    error="Error"
    result=$(echo $isError | grep "${error}")
    if [[ "$result" != "" ]]
    then
        echo "Upgrade failed..."
        echo "${isError}"
        exit
    fi
    echo "Install success, please restart your Grafana Server!"
}

function pluginsDirUpgrade() {
    plugPath=$1
    if [ ! -x ${plugPath} ]; then
        echo "Please check your --pluginsDir value."
        exit
    fi
    #备份
    isBack=`backupFiles $plugPath`
    if [ "$isBack" = "1" ]; then
        echo "Please check the plugin directory!"
        exit
    fi
    appPath=`echo "${plugPath}/tencentcloud-monitor-app"`
    cd $appPath
    #判断本地插件版本
    local_version=`checkLocalVersion`
    local_curl=`checkCommand "curl"`
    if [ "$local_curl" != "1" ]; then
        echo $local_curl
        exit
    fi
    version=`checkVersion`
    if [ "$version" = "no" ]; then
        echo "curl command time-out, please check your proxy and try again."
        exit
    fi
    if ! version_lt $local_version $version; then
       echo "Congratulations! You are already at the latest version: ${local_version}."
       exit
    fi
    #判断全局命令是否存在
    local_grafana=`checkCommand "grafana-cli"`
    if [ "$local_grafana" != "1" ]; then
        echo $local_grafana
        exit
    fi
    #配置插件url
    rm -rf "tencentcloud-monitor-app"
    isError=`grafana-cli --pluginUrl https://github.com/TencentCloud/tencentcloud-monitor-grafana-app/releases/download/${version}/tencentcloud-monitor-app-${version}.zip --pluginsDir $plugPath plugins install tencentcloud-monitor-app ${version}`
    #更新插件
    error="Error"
    result=$(echo $isError | grep "${error}")
    if [[ "$result" != "" ]]
    then
        echo "Upgrade failed..."
        echo "${isError}"
        unzip "${isBack}.zip.backup" > /dev/null 2>&1
        exit
    fi
    echo "Upgrade success, please restart your Grafana Server!"
}

function RollbackProcess() {
    OS="`uname`"
    #判断插件默认目录
    plugPath=`checkDirectory $OS`
    if [ "$plugPath" = "1" ]; then
        echo "Please check your --pluginsDir value."
        exit
    fi
    cd $plugPath
    if [[ "$OS" =~ ^Linux ]];
    then
        backPath=`ls -lt  | grep -Po "tencentcloud-monitor-app-\d{14}\.zip\.backup" | head -n 1 |awk '{print $1}'`
    else
        backPath=`ls -lt  | grep -i -E "tencentcloud-monitor-app-\d{14}\.zip\.backup" | head -n 1 |awk '{print $9}'`
    fi
    isBack=`backupFiles $plugPath`
    if [ "$isBack" = "1" ]; then
        echo "Please check your --pluginsDir value."
        exit
    fi
    rm -rf "tencentcloud-monitor-app"
    unzip "${backPath}"
    #> /dev/null 2>&1
    echo "rollback succeeded"
}
function pluginsDirRollback() {
    plugPath=$1
    if [ ! -x ${plugPath} ]; then
        echo "Please check your --pluginsDir value."
        exit
    fi
    OS="`uname`"
    cd $plugPath
    if [[ "$OS" =~ ^Linux ]];
    then
        backPath=`ls -lt  | grep -Po "tencentcloud-monitor-app-\d{14}\.zip\.backup" | head -n 1 |awk '{print $1}'`
    else
        backPath=`ls -lt  | grep -i -E "tencentcloud-monitor-app-\d{14}\.zip\.backup" | head -n 1 |awk '{print $9}'`
    fi

    isBack=`backupFiles $plugPath`
    if [ "$isBack" = "1" ]; then
        echo "Please check your --pluginsDir value."
        exit
    fi
    rm -rf "tencentcloud-monitor-app"
    unzip "${backPath}" > /dev/null 2>&1
    echo "rollback succeeded"
}
helpArray=(
"--help",
"--h",
)

commandArray=(
"install",
"upgrade",
"rollback",
)

if [[ ${helpArray[@]/${1}/} != ${helpArray[@]} || ! -n "$1" ]];then
    echo "\
NAME:
  TencentCloud Monitor Grafana Plugin CLI

USAGE:
  ./tc-monitor-cli [global options] command [command options] [arguments...]

COMMANDS:
  install              install the latest version of tencentcloud-monitor-app plugin
  upgrade              upgrade tencentcloud-monitor-app plugin to the latest version
  rollback             rollback tencentcloud-monitor-app plugin to a specific version

GLOBAL OPTIONS:
  --pluginsDir         overwrite the path of Grafana plugin's directory (optional)
  --help, -h           show help (default: false) "
    exit
elif [[ "$1" = "--pluginsDir" && ${commandArray[@]/${2}/} != ${commandArray[@]} ]];then
    echo "Please check your pluginDir path!"
    exit
elif [[ "$1" = "--pluginsDir" && "$3" == "install" ]];then
     pluginsDirInstall "$2" "$4"
elif [[ "$1" = "--pluginsDir" && "$3" == "upgrade" ]];then
    pluginsDirUpgrade "$2"
elif [[ "$1" = "--pluginsDir" && "$3" == "rollback" ]];then
    pluginsDirRollback "$2"
elif [[ "$1" = "install"  &&  ${helpArray[@]/${2}/} != ${helpArray[@]} ]]; then
    echo "\
NAME:
  TencentCloud Monitor Grafana Plugin CLI install - \${version (optional)}

USAGE:
  ./tc-monitor-cli install \${version (optional)}

GLOBAL OPTIONS:
  --pluginsDir         overwrite the path of Grafana plugin's directory (optional)
  --help, -h           show help (default: false)"
elif [[ "$1" = "install" ]]; then
    InstallProcess "$2"
elif [ "$1" = "upgrade" ]; then
    UpdateProcess
elif [ "$1" = "rollback" ];then
    RollbackProcess
fi
